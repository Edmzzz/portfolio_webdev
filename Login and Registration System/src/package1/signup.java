/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package package1;
import java.awt.Color;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.Statement;
import java.util.regex.Pattern;
/**
 *
 * @author Uriel Papa
 */
public class signup extends javax.swing.JFrame {
static Connection connection;
    static String url;
    static Statement st;
    static ResultSet rs;

    int userId;
public boolean search(int user_id, String password) throws SQLException, ClassNotFoundException {
    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        url = "jdbc:mysql://localhost:3306/isdb";
        connection = DriverManager.getConnection(url, "root", "1234");
        st = connection.createStatement();
        System.out.println("Database connection established.");
    } catch (SQLException | ClassNotFoundException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error connecting to the database", "System Message", JOptionPane.ERROR_MESSAGE);
    }

    // Use PreparedStatement to avoid SQL injection
    String query = "SELECT * FROM reg_tbl WHERE user_id = ? AND password = ?";
    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
        preparedStatement.setInt(1, user_id);
        preparedStatement.setString(2, password);

        rs = preparedStatement.executeQuery();

        return rs.next(); // Returns true if a record is found, false otherwise
    }
}
    /**
     * Creates new form signup
     */
    public signup() {
        initComponents();
        signup.this.setLocation(400,180);
        userId = generateUserID();
        labelUserID.setText("User ID:  " + userId);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textPassword = new javax.swing.JTextField();
        textFname = new javax.swing.JTextField();
        fname = new javax.swing.JLabel();
        textLastName = new javax.swing.JTextField();
        lname = new javax.swing.JLabel();
        textUserAddress = new javax.swing.JTextField();
        address = new javax.swing.JLabel();
        textContactNumber = new javax.swing.JTextField();
        mobileno = new javax.swing.JLabel();
        textEmailAddress = new javax.swing.JTextField();
        labelB = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        email = new javax.swing.JLabel();
        labelUserID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fname.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        fname.setText("First Name:");

        lname.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        lname.setText("Last Name:");

        address.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        address.setText("Address:");

        mobileno.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        mobileno.setText("Mobile No.:");

        labelB.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        labelB.setText("Password:");

        jButton1.setText("save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Sign Up");

        email.setText("Email:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mobileno)
                            .addComponent(address)
                            .addComponent(lname)
                            .addComponent(fname)
                            .addComponent(email))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textFname, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textUserAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(labelUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(157, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(211, 211, 211))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(234, 234, 234))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(88, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelB)
                    .addComponent(textPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fname)
                    .addComponent(textFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lname)
                    .addComponent(textLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mobileno)
                    .addComponent(textContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(address)
                    .addComponent(textUserAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textEmailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(email))
                .addGap(25, 25, 25)
                .addComponent(jButton1)
                .addGap(89, 89, 89))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private boolean isPasswordValid(String password) {
        if (password == null || password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Password cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (password.length() < 8 || password.length() > 20) {
            JOptionPane.showMessageDialog(null, "Password must be between 8 to 20 characters", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!Pattern.compile("[a-z]").matcher(password).find()) {
            JOptionPane.showMessageDialog(null, "Password must contain at least one lower case letter", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!Pattern.compile("[A-Z]").matcher(password).find()) {
            JOptionPane.showMessageDialog(null, "Password must contain at least one upper case letter", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!Pattern.compile("[0-9]").matcher(password).find()) {
            JOptionPane.showMessageDialog(null, "Password must contain at least one digit", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!Pattern.compile("[!@#$%^&*()_=+?\\-]").matcher(password).find()) {
            JOptionPane.showMessageDialog(null, "Password must contain at least one special character", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    private boolean areFieldsFilled() {
       // Check if all the text fields are filled
       return !textPassword.getText().isEmpty() &&
              !textFname.getText().isEmpty() &&
              !textLastName.getText().isEmpty() &&
              !textContactNumber.getText().isEmpty() &&
              !textUserAddress.getText().isEmpty() &&
              !textEmailAddress.getText().isEmpty();
   }
    private boolean isGmailAddress(String email) {
      
       String gmailRegex = "\\b[A-Za-z0-9._%+-]+@gmail\\.com\\b";
       return email.matches(gmailRegex);
   }
    private boolean isMobileNumberValid(String mobileNumber) {
    // Check if the mobile number is a valid 11-digit number
    return mobileNumber.matches("\\d{11}");
    }
    private int generateUserID() {
       // Implement a logic to generate a unique 5-digit ID
       // For example:
       return (int) (Math.random() * 90000) + 10000;
   }
 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    labelB.setForeground(Color.black);
    try {
        if (!areFieldsFilled()) {
            JOptionPane.showMessageDialog(null, "Please fill in all the fields", "System Message", JOptionPane.ERROR_MESSAGE);
            labelB.setForeground(Color.red);
            fname.setForeground(Color.red);
            lname.setForeground(Color.red);
            mobileno.setForeground(Color.red);
            address.setForeground(Color.red);
            email.setForeground(Color.red);
            
            return;
        }
        // Check if the record already exists
        if (search(userId, textPassword.getText())) {
            JOptionPane.showMessageDialog(null, "Record Already Exists", "System Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the password is valid
        if (!isPasswordValid(textPassword.getText())) {
            labelB.setForeground(Color.red);
            return;
        }
        if (!isGmailAddress(textEmailAddress.getText())) {
            JOptionPane.showMessageDialog(null, "Please enter a valid Gmail address", "System Message", JOptionPane.ERROR_MESSAGE);
            email.setForeground(Color.red);
            return;
        }
        if (!isMobileNumberValid(textContactNumber.getText())) {
            JOptionPane.showMessageDialog(null, "Please enter a valid 11-digit mobile number", "System Message", JOptionPane.ERROR_MESSAGE);
            mobileno.setForeground(Color.red);
            return;
        }
        // Insert the new record

        String query = "INSERT INTO reg_tbl (user_id, password, fname, lname, mobileno, address, email) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, userId);
            preparedStatement.setString(2, textPassword.getText());
            preparedStatement.setString(3, textFname.getText());
            preparedStatement.setString(4, textLastName.getText());
            preparedStatement.setString(5, textContactNumber.getText());
            preparedStatement.setString(6, textUserAddress.getText());
            preparedStatement.setString(7, textEmailAddress.getText());
            
            preparedStatement.executeUpdate();
        } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error executing SQL statement", "System Message", JOptionPane.ERROR_MESSAGE);
    }

        JOptionPane.showMessageDialog(null, "Record Created", "System Message", JOptionPane.INFORMATION_MESSAGE);

        // Clear the input fields
        textEmailAddress.setText("");
        textPassword.setText("");
        textFname.setText("");
        textLastName.setText("");
        textContactNumber.setText("");
        textUserAddress.setText("");

    } catch (SQLException | ClassNotFoundException ex) {
        ex.printStackTrace(); // Log the exception or handle it accordingly
        JOptionPane.showMessageDialog(null, "Error in database operation", "System Message", JOptionPane.ERROR_MESSAGE);
    }

    // Redirect to the login screen
    Login login = new Login();
    login.setVisible(true);
    setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(signup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(signup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(signup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(signup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new signup().setVisible(true);
            }
           
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel address;
    private javax.swing.JLabel email;
    private javax.swing.JLabel fname;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelB;
    private javax.swing.JLabel labelUserID;
    private javax.swing.JLabel lname;
    private javax.swing.JLabel mobileno;
    private javax.swing.JTextField textContactNumber;
    private javax.swing.JTextField textEmailAddress;
    private javax.swing.JTextField textFname;
    private javax.swing.JTextField textLastName;
    private javax.swing.JTextField textPassword;
    private javax.swing.JTextField textUserAddress;
    // End of variables declaration//GEN-END:variables
}
